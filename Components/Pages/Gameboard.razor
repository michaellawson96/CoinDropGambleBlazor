@page "/"
@using System.ComponentModel
@using CoinDropGamble.Models.DTOs
@using CoinDropGamble.Services
@using Microsoft.AspNetCore.Components;
@using CoinDropGamble.Models.Enums
@using CoinDropGamble.Helpers
@using CoinDropGamble.Components.Pages.Displays;
@rendermode InteractiveServer
@inject IGameService GameService;

<PageTitle>Coin Drop Gamble</PageTitle>

@if (!GameService.GameState.IsGameStarted)
{
    <IntroDisplay />
}
else
{
    <div class="flex flex-column justify-content-center align-items-center vh-25 py-2 background">
    <div class="row g-4">
        <PiggyBankDisplay />

        <DescriptionDisplay />
    </div>
</div>

<div class="flex flex-column justify-content-center align-items-center vh-50 py-2 background">
    <div class="row g-4">
        <!-- Action Section -->
        <div class="col-6 d-flex flex-column">
            <div class="card text-center text-white bg-dark shadow-lg section-card flex-fill">
                <div class="card-body action-section">
                    <div class="row">
                        <!-- Drop Coin Action -->
                        <button 
                            class="btn btn-primary btn-lg col-12 my-1" 
                            disabled="@(GameService.GameState.IsPlayerCoinDisabled || GameService.GameState.IsPlayerControlsDisabled || (GameService.GameState.PlayerPlayedCoinsCount == GameStateDTO.MAX_COINS_PLAYABLE))" 
                            @onclick="GameService.PlayerDropCoinAction">
                            @* Render the coins *@
                            @for (int i = 0; i < GameStateDTO.MAX_COINS_PLAYABLE; i++)
                            {
                                <i class="bi @(i < GameService.GameState.PlayerPlayedCoinsCount ? "bi-dash-circle-dotted text-secondary" : "bi-coin text-warning") me-1"></i>
                            }
                        </button>
                        <!-- Shake Action -->
                        <button class="btn btn-success btn-lg col-12 my-1 " disabled="@(GameService.GameState.IsPlayerShakeDisabled || GameService.GameState.HasPlayerShakenThisRound || GameService.GameState.IsPlayerControlsDisabled)" @onclick="GameService.PlayerShakeAction">Shake</button>
                        <!-- Special Action -->
                        <button class="btn btn-warning btn-lg col-12  my-1 " disabled="@(GameService.GameState.IsPlayerSpecialDisabled || !GameService.GameState.PlayerSpecialCoins.Any() || GameService.GameState.IsPlayerControlsDisabled)" @onclick="GameService.SpecialAction">Special</button>
                        <!-- End Turn Action -->
                        <button class="btn btn-danger btn-lg col-12  my-1 " disabled="@(GameService.GameState.IsPlayerEndTurnDisabled || !GameService.GameState.HasPlayerActedThisTurn || GameService.GameState.IsPlayerControlsDisabled )" @onclick="GameService.EndTurnAction">End Turn</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status Section -->
        <div class="col-6 d-flex flex-column">
            <div class="card text-center text-white bg-dark shadow-lg section-card flex-fill">
                <div class="card-body status-section">
                    
                    <p class="card-text">
                        PLAYER
                        @if(GameService.GameState.IsPlayersTurn)
                        {
                            <span class="badge rounded-pill bg-success">Your Turn</span>
                        }
                    </p>
                    <p class="card-text">
                        @for (int i = 0; i < GameService.GameState.CurrentGameMaxHealth; i++)
                        {
                            if (i < GameService.GameState.PlayerHealthCount)
                            {
                                <i class="bi bi-heart-fill text-danger"></i> <!-- Filled heart for health left -->
                            }
                            else
                            {
                                <i class="bi bi-heart text-danger"></i> <!-- Empty heart for health lost -->
                            }
                        }

                        &nbsp;$ @GameService.GameState.PlayerPocketMoneyCount
                    </p>
                    <p class="card-text">Games Won: @GameService.GameState.GamesWon</p>
                    <hr>
                    <p class="card-text">
                        OPPONENT
                        @if(GameService.GameState.IsOpponentsTurn)
                        {
                            <span class="badge rounded-pill bg-success">Your Turn</span>
                        }
                    </p>
                    <p class="card-text">
                        @for (int i = 0; i < GameService.GameState.CurrentGameMaxHealth; i++)
                        {
                            if (i < GameService.GameState.OpponentHealthCount)
                            {
                                <i class="bi bi-heart-fill text-danger"></i> <!-- Filled heart for health left -->
                            }
                            else
                            {
                                <i class="bi bi-heart text-danger"></i> <!-- Empty heart for health lost -->
                            }
                        }

                        &nbsp;$ @GameService.GameState.OpponentPocketMoneyCount
                    </p>
                    
                </div>
            </div>
        </div>
    </div>
</div>


}
